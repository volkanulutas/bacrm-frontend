{"ast":null,"code":"import { useMemo } from 'react';\nimport warning from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    process.env.NODE_ENV !== \"production\" ? warning(span === undefined, 'Descriptions', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return clone;\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, span));\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, mergedSpan));\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return rows;\n}\nconst useRow = (mergedColumn, items) => {\n  const rows = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  return rows;\n};\nexport default useRow;","map":{"version":3,"names":["useMemo","warning","getFilledItem","rowItem","rowRestCol","span","clone","undefined","Object","assign","process","env","NODE_ENV","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","push","useRow","items"],"sources":["/Users/volkanulutas/Documents/Projects/bacrm-frontend/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import { useMemo } from 'react';\nimport warning from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    process.env.NODE_ENV !== \"production\" ? warning(span === undefined, 'Descriptions', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return clone;\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, span));\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, mergedSpan));\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return rows;\n}\nconst useRow = (mergedColumn, items) => {\n  const rows = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  return rows;\n};\nexport default useRow;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,OAAO,MAAM,qBAAqB;AACzC,SAASC,aAAaA,CAACC,OAAO,EAAEC,UAAU,EAAEC,IAAI,EAAE;EAChD,IAAIC,KAAK,GAAGH,OAAO;EACnB,IAAIE,IAAI,KAAKE,SAAS,IAAIF,IAAI,GAAGD,UAAU,EAAE;IAC3CE,KAAK,GAAGE,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,OAAO,CAAC,EAAE;MAChDE,IAAI,EAAED;IACR,CAAC,CAAC;IACFM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,OAAO,CAACI,IAAI,KAAKE,SAAS,EAAE,cAAc,EAAE,oEAAoE,CAAC,GAAG,KAAK,CAAC;EACpK;EACA,OAAOD,KAAK;AACd;AACA;AACA,SAASO,WAAWA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC3C,MAAMC,IAAI,GAAG,EAAE;EACf,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIb,UAAU,GAAGW,YAAY;EAC7BD,QAAQ,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC,CAACC,OAAO,CAAC,CAACjB,OAAO,EAAEkB,KAAK,KAAK;IAClD,MAAMhB,IAAI,GAAGF,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACE,IAAI;IAC3E,MAAMiB,UAAU,GAAGjB,IAAI,IAAI,CAAC;IAC5B;IACA,IAAIgB,KAAK,KAAKP,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;MACjCN,MAAM,CAACO,IAAI,CAACtB,aAAa,CAACC,OAAO,EAAEC,UAAU,EAAEC,IAAI,CAAC,CAAC;MACrDW,IAAI,CAACQ,IAAI,CAACP,MAAM,CAAC;MACjB;IACF;IACA,IAAIK,UAAU,GAAGlB,UAAU,EAAE;MAC3BA,UAAU,IAAIkB,UAAU;MACxBL,MAAM,CAACO,IAAI,CAACrB,OAAO,CAAC;IACtB,CAAC,MAAM;MACLc,MAAM,CAACO,IAAI,CAACtB,aAAa,CAACC,OAAO,EAAEC,UAAU,EAAEkB,UAAU,CAAC,CAAC;MAC3DN,IAAI,CAACQ,IAAI,CAACP,MAAM,CAAC;MACjBb,UAAU,GAAGW,YAAY;MACzBE,MAAM,GAAG,EAAE;IACb;EACF,CAAC,CAAC;EACF,OAAOD,IAAI;AACb;AACA,MAAMS,MAAM,GAAGA,CAACV,YAAY,EAAEW,KAAK,KAAK;EACtC,MAAMV,IAAI,GAAGhB,OAAO,CAAC,MAAMa,WAAW,CAACa,KAAK,EAAEX,YAAY,CAAC,EAAE,CAACW,KAAK,EAAEX,YAAY,CAAC,CAAC;EACnF,OAAOC,IAAI;AACb,CAAC;AACD,eAAeS,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}