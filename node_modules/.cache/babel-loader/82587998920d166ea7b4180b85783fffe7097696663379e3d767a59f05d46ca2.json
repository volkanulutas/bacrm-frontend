{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nfunction parseColWidth(totalWidth) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (width.endsWith('%')) {\n    return totalWidth * parseFloat(width) / 100;\n  }\n  return null;\n}\n\n/**\n * Fill all column with width\n */\nexport default function useWidthColumns(columns, scrollWidth) {\n  var filledColumns = React.useMemo(function () {\n    // Fill width if needed\n    if (scrollWidth && scrollWidth > 0) {\n      var totalWidth = 0;\n      var missWidthCount = 0;\n\n      // collect not given width column\n      columns.forEach(function (col) {\n        var colWidth = parseColWidth(scrollWidth, col.width);\n        if (colWidth) {\n          totalWidth += colWidth;\n        } else {\n          missWidthCount += 1;\n        }\n      });\n\n      // Fill width\n      var restWidth = scrollWidth - totalWidth;\n      var restCount = missWidthCount;\n      var avgWidth = restWidth / missWidthCount;\n      return columns.map(function (col) {\n        var clone = _objectSpread({}, col);\n        var colWidth = parseColWidth(scrollWidth, clone.width);\n        if (colWidth) {\n          clone.width = colWidth;\n        } else {\n          var colAvgWidth = Math.floor(avgWidth);\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\n          restWidth -= colAvgWidth;\n          restCount -= 1;\n        }\n        return clone;\n      });\n    }\n    return columns;\n  }, [columns, scrollWidth]);\n  return filledColumns;\n}","map":{"version":3,"names":["_objectSpread","React","parseColWidth","totalWidth","width","arguments","length","undefined","endsWith","parseFloat","useWidthColumns","columns","scrollWidth","filledColumns","useMemo","missWidthCount","forEach","col","colWidth","restWidth","restCount","avgWidth","map","clone","colAvgWidth","Math","floor"],"sources":["/Users/volkanulutas/Documents/Projects/bacrm-frontend/node_modules/antd/node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nfunction parseColWidth(totalWidth) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (width.endsWith('%')) {\n    return totalWidth * parseFloat(width) / 100;\n  }\n  return null;\n}\n\n/**\n * Fill all column with width\n */\nexport default function useWidthColumns(columns, scrollWidth) {\n  var filledColumns = React.useMemo(function () {\n    // Fill width if needed\n    if (scrollWidth && scrollWidth > 0) {\n      var totalWidth = 0;\n      var missWidthCount = 0;\n\n      // collect not given width column\n      columns.forEach(function (col) {\n        var colWidth = parseColWidth(scrollWidth, col.width);\n        if (colWidth) {\n          totalWidth += colWidth;\n        } else {\n          missWidthCount += 1;\n        }\n      });\n\n      // Fill width\n      var restWidth = scrollWidth - totalWidth;\n      var restCount = missWidthCount;\n      var avgWidth = restWidth / missWidthCount;\n      return columns.map(function (col) {\n        var clone = _objectSpread({}, col);\n        var colWidth = parseColWidth(scrollWidth, clone.width);\n        if (colWidth) {\n          clone.width = colWidth;\n        } else {\n          var colAvgWidth = Math.floor(avgWidth);\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\n          restWidth -= colAvgWidth;\n          restCount -= 1;\n        }\n        return clone;\n      });\n    }\n    return columns;\n  }, [columns, scrollWidth]);\n  return filledColumns;\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAaA,CAACC,UAAU,EAAE;EACjC,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EAClF,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAIA,KAAK,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvB,OAAOL,UAAU,GAAGM,UAAU,CAACL,KAAK,CAAC,GAAG,GAAG;EAC7C;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA,eAAe,SAASM,eAAeA,CAACC,OAAO,EAAEC,WAAW,EAAE;EAC5D,IAAIC,aAAa,GAAGZ,KAAK,CAACa,OAAO,CAAC,YAAY;IAC5C;IACA,IAAIF,WAAW,IAAIA,WAAW,GAAG,CAAC,EAAE;MAClC,IAAIT,UAAU,GAAG,CAAC;MAClB,IAAIY,cAAc,GAAG,CAAC;;MAEtB;MACAJ,OAAO,CAACK,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC7B,IAAIC,QAAQ,GAAGhB,aAAa,CAACU,WAAW,EAAEK,GAAG,CAACb,KAAK,CAAC;QACpD,IAAIc,QAAQ,EAAE;UACZf,UAAU,IAAIe,QAAQ;QACxB,CAAC,MAAM;UACLH,cAAc,IAAI,CAAC;QACrB;MACF,CAAC,CAAC;;MAEF;MACA,IAAII,SAAS,GAAGP,WAAW,GAAGT,UAAU;MACxC,IAAIiB,SAAS,GAAGL,cAAc;MAC9B,IAAIM,QAAQ,GAAGF,SAAS,GAAGJ,cAAc;MACzC,OAAOJ,OAAO,CAACW,GAAG,CAAC,UAAUL,GAAG,EAAE;QAChC,IAAIM,KAAK,GAAGvB,aAAa,CAAC,CAAC,CAAC,EAAEiB,GAAG,CAAC;QAClC,IAAIC,QAAQ,GAAGhB,aAAa,CAACU,WAAW,EAAEW,KAAK,CAACnB,KAAK,CAAC;QACtD,IAAIc,QAAQ,EAAE;UACZK,KAAK,CAACnB,KAAK,GAAGc,QAAQ;QACxB,CAAC,MAAM;UACL,IAAIM,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;UACtCE,KAAK,CAACnB,KAAK,GAAGgB,SAAS,KAAK,CAAC,GAAGD,SAAS,GAAGK,WAAW;UACvDL,SAAS,IAAIK,WAAW;UACxBJ,SAAS,IAAI,CAAC;QAChB;QACA,OAAOG,KAAK;MACd,CAAC,CAAC;IACJ;IACA,OAAOZ,OAAO;EAChB,CAAC,EAAE,CAACA,OAAO,EAAEC,WAAW,CAAC,CAAC;EAC1B,OAAOC,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}